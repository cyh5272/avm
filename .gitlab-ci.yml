stages:
  - check
  - build
  - test

# Check code style with clang-format
Style Check:
  stage: check
  image: registry.gitlab.com/aomediacodec/aom-testing/alpine3
  before_script:
    - apk add --no-cache git clang
  script:
    - |
      for f in $(git ls-files '*.[hc]pp' '*.cc' '*.[ch]' | grep -v third_party); do
        clang-format -i --style=file $f
      done

# Fetch the test data later needed for the unit test jobs
Test Data:
  stage: check
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  variables:
    LIBAOM_TEST_DATA_PATH: ${CI_PROJECT_DIR}/libaom-test-data
  script:
    - cmake -B aom_testdata -GNinja
    - cmake --build aom_testdata --target testdata
  artifacts:
    expire_in: 1 day
    paths:
      - ${CI_PROJECT_DIR}/libaom-test-data

Linux Build:
  stage: build
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  variables:
    CMAKE_FLAGS: -DENABLE_CCACHE=1 -DENABLE_WERROR=1 -DCONFIG_LOWBITDEPTH=1
  parallel:
    matrix:
      - AOM_BUILD_CONFIG:
          - internal-stats
          - shared
          - no-rtcd
          - rtcd
          - encode-only
          - decode-only
          - no-thread
          - no-webm
          - inspection-accounting
          - nasm
          - no-examples
          - realtime-only
          - high-bitdepth
          - no-high-bitdepth
  script:
    - |
      case $AOM_BUILD_CONFIG in
        internal-stats)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_INTERNAL_STATS=1"
          ;;
        small)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_SMALL=1"
          ;;
        shared)
          CMAKE_FLAGS="$CMAKE_FLAGS -DBUILD_SHARED_LIBS=1"
          ;;
        shared-no-static)
          CMAKE_FLAGS="$CMAKE_FLAGS -DBUILD_SHARED_LIBS=1 -DCONFIG_STATIC=0"
          ;;
        no-rtcd)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_RUNTIME_CPU_DETECT=0"
          ;;
        rtcd)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_RUNTIME_CPU_DETECT=1"
          ;;
        realtime-only)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_REALTIME_ONLY=1"
          ;;
        encode-only)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_AV1_DECODER=0"
          ;;
        decode-only)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_AV1_ENCODER=0"
          ;;
        no-thread)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_MULTITHREAD=0"
          ;;
        no-webm)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_WEBM_IO=0"
          ;;
        inspection-accounting)
          CMAKE_FLAGS="$CMAKE_FLAGS -DCONFIG_INSPECTION=1 -DACCOUNTING=1"
          ;;
        nasm)
          CMAKE_FLAGS="$CMAKE_FLAGS -DENABLE_NASM=1"
          ;;
        no-examples)
          CMAKE_FLAGS="$CMAKE_FLAGS -DENABLE_EXAMPLES=0"
          ;;
        high-bitdepth)
          CMAKE_FLAGS=""
          CMAKE_FLAGS="-DENABLE_CCACHE=1 -DENABLE_WERROR=1 -DFORCE_HIGHBITDEPTH_DECODING=0 -DCONFIG_AV1_HIGHBITDEPTH=1"
          ;;
        no-high-bitdepth)
          CMAKE_FLAGS=""
          CMAKE_FLAGS="-DENABLE_CCACHE=1 -DENABLE_WERROR=1 -DFORCE_HIGHBITDEPTH_DECODING=0 -DCONFIG_AV1_HIGHBITDEPTH=0"
          ;;
        *)
          echo -n "Unknown configuration: '$AOM_BUILD_CONFIG'"
          exit 1
          ;;
      esac
      echo "CMake Flags: $CMAKE_FLAGS"
    - cmake -B aom_build -GNinja -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS
    - cmake --build aom_build -j 1
    - cmake --build aom_build --target dist
    - DESTDIR="${CI_PROJECT_DIR}/installroot" cmake --build aom_build --target install
  artifacts:
    expire_in: 1 day
    paths:
      - ${CI_PROJECT_DIR}/aom_build/dist/*
      - ${CI_PROJECT_DIR}/installroot/*

Linux Test Builds:
  stage: build
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  script:
    - cmake -B aom_test_build -GNinja
        -DCMAKE_BUILD_TYPE=Debug
        -DENABLE_EXAMPLES=0
        -DBUILD_SHARED_LIBS=0
        -DCONFIG_STATIC=0
    - cmake --build aom_test_build
  artifacts:
    expire_in: 1 day
    paths:
      - aom_test_build/test_libaom

Linux Unit Tests:
  stage: test
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  parallel: 20
  variables:
    LIBAOM_TEST_DATA_PATH: ${CI_PROJECT_DIR}/libaom-test-data
    GTEST_TOTAL_SHARDS: ${CI_NODE_TOTAL}
    GTEST_OUTPUT: "xml:report.xml"
  before_script:
    - export GTEST_SHARD_INDEX=$((CI_NODE_INDEX - 1))
  script:
    - ./aom_test_build/test_libaom
        --gtest_filter='-*Large*'
  needs:
    - 'Test Data'
    - 'Linux Test Builds'
  artifacts:
    when: always
    reports:
      junit: report.xml
